security:
    role_hierarchy:
        ROLE_CLIENT: ROLE_USER
        ROLE_EMPLOYEE: ROLE_CLIENT
        ROLE_ADMIN: ROLE_EMPLOYEE
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\User:
            algorithm: auto
    providers:
        #        users_in_memory: { memory: null }
        user_provider:
            id: App\Security\Core\User\UserProvider
    #            entity:
    #                class: App\Entity\User
    #                property: email
    firewalls:
        health_check:
            pattern: ^/api/v1/health-check
            methods: [GET]
            security: false
        register:
            pattern: ^/api/v1/users/create
            methods: [POST]
            security: false
        activate:
            pattern: ^/api/v1/users/activate
            methods: [PUT]
            security: false
        request_reset_password:
            pattern: ^/api/v1/users/request_reset_password
            methods: [ POST ]
            security: false
        reset_activation_email:
            pattern: ^/api/v1/users/resend_activation_email
            methods: [ POST ]
            security: false
        docs:
            pattern: ^/api/v1/docs
            methods: [GET]
            security: false
        login:
            pattern: ^/api/v1/users/login
            stateless: true
            provider: user_provider
            json_login:
                check_path: /api/v1/users/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false
        api:
            pattern: ^/api/v1
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            #        dev:
            #            pattern: ^/(_(profiler|wdt)|css|images|js)/
            #            security: false
            #        main:
            #            lazy: true
            #            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v1, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/profile, roles: ROLE_USER }
